# Generated by Django 2.2 on 2019-04-16 14:44

import app.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=63)),
                ('is_student', models.BooleanField(default=False, verbose_name='student status')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='teacher status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Предмет',
                'db_table': 'Subjects',
                'default_related_name': 'Предметы',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, verbose_name='Название')),
                ('text', models.TextField(verbose_name='Текст')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания')),
            ],
            options={
                'verbose_name': 'Задание',
                'db_table': 'Tasks',
                'ordering': ['taught_subject', 'start_date'],
                'default_related_name': 'Задания',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Студенты', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('group', models.CharField(max_length=127, verbose_name='Группа')),
                ('specialty', models.CharField(max_length=127, verbose_name='Напревление')),
            ],
            options={
                'verbose_name': 'Студент',
                'db_table': 'Students',
                'ordering': ['specialty', 'group'],
                'default_related_name': 'Студенты',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Преподаватели', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('degree', models.CharField(max_length=127, verbose_name='Степень')),
            ],
            options={
                'verbose_name': 'Преподаватель',
                'db_table': 'Teachers',
                'default_related_name': 'Преподаватели',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dayOfWeek', app.models.DayOfTheWeekField(choices=[('1', 'Понедельник'), ('2', 'Вторник'), ('3', 'Среда'), ('4', 'Четверг'), ('5', 'Пятница'), ('6', 'Суббота'), ('7', 'Воскресенье')], max_length=1)),
                ('time', models.TimeField(verbose_name='Время начала пары')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Преподаваемые_предметы', to='app.Subject')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Преподаваемые_предметы', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Преподаваемый_предмет',
                'db_table': 'Teacher_Subject',
                'ordering': ['subject', 'teacher', 'dayOfWeek'],
                'default_related_name': 'Преподаваемые_предметы',
            },
        ),
        migrations.CreateModel(
            name='TaskFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=app.models.user_directory_path)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Прикрепленный_к_заданию_файлы', to='app.Task')),
            ],
            options={
                'verbose_name': 'Прикрепленный_к_заданию_файл',
                'db_table': 'TaskFiles',
                'ordering': ['task'],
                'default_related_name': 'Прикрепленный_к_заданию_файлы',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='taught_subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Задания', to='app.TeacherSubject'),
        ),
        migrations.CreateModel(
            name='StudentTeacherSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Студенты_преподаваемого_предмета', to='app.TeacherSubject')),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Студенты_преподаваемого_предмета', to='app.Student')),
            ],
            options={
                'verbose_name': 'Студент_преподаваемого_предмета',
                'db_table': 'Student_TeacherSubject',
                'ordering': ['teacher_subject', 'student'],
                'default_related_name': 'Студенты_преподаваемого_предмета',
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(verbose_name='Баллы')),
                ('date', models.DateField(verbose_name='Дата получения')),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Оценки', to='app.StudentTeacherSubject')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Оценки', to='app.Task')),
            ],
            options={
                'verbose_name': 'Оценка',
                'db_table': 'Marks',
                'ordering': ['date'],
                'default_related_name': 'Оценки',
            },
        ),
    ]
