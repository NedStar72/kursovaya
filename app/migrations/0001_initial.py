# Generated by Django 3.1.3 on 2020-11-11 20:11

import app.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=63, verbose_name='Отчество')),
                ('is_student', models.BooleanField(default=False, verbose_name='Студент')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='Преподаватель')),
                ('avatar', models.ImageField(default='/default-avatar.png', null=True, upload_to=app.models.user_avatar_path, verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompletedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('date', models.DateField(auto_now=True, verbose_name='Дата')),
            ],
            options={
                'verbose_name': 'Выполненное задание',
                'verbose_name_plural': 'Выполненные задания',
                'db_table': 'CompletedTasks',
                'ordering': ['date', 'task__name', 'student__user__last_name'],
                'default_related_name': 'completed_tasks',
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Направление')),
            ],
            options={
                'verbose_name': 'Направление',
                'verbose_name_plural': 'Направления',
                'db_table': 'Specialties',
                'default_related_name': 'Specialties',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
                'db_table': 'Subjects',
                'default_related_name': 'subjects',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, verbose_name='Название')),
                ('text', models.TextField(verbose_name='Текст')),
                ('start_date', models.DateField(auto_now_add=True, verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('is_reciprocal', models.BooleanField(default=False, verbose_name='Разрешить ответы')),
                ('is_created', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Задание',
                'verbose_name_plural': 'Задания',
                'db_table': 'Tasks',
                'ordering': ['end_date', 'start_date', 'name'],
                'default_related_name': 'tasks',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student', serialize=False, to='app.user')),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студенты',
                'db_table': 'Students',
                'ordering': ['user__last_name'],
                'default_related_name': 'students',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher', serialize=False, to='app.user')),
            ],
            options={
                'verbose_name': 'Преподаватель',
                'verbose_name_plural': 'Преподаватели',
                'db_table': 'Teachers',
                'default_related_name': 'teachers',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', app.models.DayOfTheWeekField(choices=[('1', 'Понедельник'), ('2', 'Вторник'), ('3', 'Среда'), ('4', 'Четверг'), ('5', 'Пятница'), ('6', 'Суббота')], max_length=1)),
                ('time', models.TimeField(verbose_name='Время начала пары')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_subjects', related_query_name='teacher_subjects', to='app.subject')),
            ],
            options={
                'verbose_name': 'Преподаваемый предмет',
                'verbose_name_plural': 'Преподаваемые предметы',
                'db_table': 'Teacher_Subject',
                'ordering': ['day_of_week', 'time', 'subject__name', 'teacher'],
            },
        ),
        migrations.CreateModel(
            name='TaskFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=app.models.user_directory_path)),
                ('completed_task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='files', to='app.completedtask')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='files', to='app.task')),
            ],
            options={
                'verbose_name': 'Прикрепленный к заданию файл',
                'verbose_name_plural': 'Прикрепленные к заданиям файлы',
                'db_table': 'TaskFiles',
                'ordering': ['task'],
            },
        ),
        migrations.AddField(
            model_name='task',
            name='teacher_subjects',
            field=models.ManyToManyField(related_name='tasks', related_query_name='tasks', to='app.TeacherSubject', verbose_name='Курсы'),
        ),
        migrations.CreateModel(
            name='StudentTeacherSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.teachersubject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.student')),
            ],
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(verbose_name='Баллы')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата получения')),
                ('student_teacher_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marks', related_query_name='marks', to='app.studentteachersubject')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='marks', related_query_name='marks', to='app.task')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'db_table': 'Marks',
                'ordering': ['date'],
                'default_related_name': 'marks',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Группа')),
                ('year', models.DateField(verbose_name='Год посутпления')),
                ('specialty', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups', related_query_name='groups', to='app.specialty', verbose_name='Направление')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'db_table': 'Groups',
                'ordering': ['specialty', 'name'],
                'default_related_name': 'groups',
            },
        ),
        migrations.AddField(
            model_name='completedtask',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completed_tasks', related_query_name='completed_tasks', to='app.task'),
        ),
        migrations.AddField(
            model_name='teachersubject',
            name='students',
            field=models.ManyToManyField(related_name='teacher_subjects', related_query_name='teacher_subjects', through='app.StudentTeacherSubject', to='app.Student'),
        ),
        migrations.AddField(
            model_name='teachersubject',
            name='teacher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_subjects', related_query_name='teacher_subjects', to='app.teacher'),
        ),
        migrations.AddField(
            model_name='student',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', related_query_name='students', to='app.group', verbose_name='Группа'),
        ),
        migrations.AddField(
            model_name='completedtask',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completed_tasks', to='app.student'),
        ),
    ]
